document.addEventListener("DOMContentLoaded", async () => {
    const select = document.getElementById("planet-select");
    const descDiv = document.getElementById("planet-description");
  
    // R√©cup√©ration des plan√®tes
    const res = await fetch("/planets");
    const planets = await res.json();
  
    // Remplissage du menu d√©roulant
    planets.forEach(p => {
      const opt = document.createElement("option");
      opt.value = p.toi;
      opt.textContent = `Exoplan√®te ${p.toi}`;
      select.appendChild(opt);
    });
  
    // Gestion de la s√©lection
    select.addEventListener("change", async () => {
      const toi = select.value;
      if (!toi) {
        descDiv.textContent = "";
        return;
      }
  
      // Effet de chargement fluide
      const loadingMessages = [
        "üî≠ Analyzing atmospheric data‚Ä¶",
        "üõ∞Ô∏è Cross-checking with NASA Exoplanet Archive‚Ä¶",
        "üí´ Interpreting cosmic signals‚Ä¶",
        "üî≠ Initializing AXiA analysis protocol...",
        "Retrieving stellar and orbital data from NASA archives...",
        "Parsing exoplanet parameters: radius, mass, temperature...",
        "Cross-checking with Kepler and TESS mission datasets...",
        "Estimating atmospheric composition...",
        "Detecting potential biosignatures (H‚ÇÇO, O‚ÇÇ, CH‚ÇÑ)...",
        "Calculating surface gravity and equilibrium temperature...",
        "Evaluating stellar radiation impact...",
        "Running habitability index model...",
        "Compiling findings and generating summary..."
      ];
  
      descDiv.textContent = "";
      descDiv.style.opacity = "0";
  
      // Fonction pour afficher les messages un par un
      const showMessage = (msg, delay) => {
        return new Promise(resolve => {
          setTimeout(() => {
            descDiv.style.opacity = "0";
            setTimeout(() => {
              descDiv.textContent = msg;
              descDiv.style.transition = "opacity 0.8s ease";
              descDiv.style.opacity = "1";
            }, 300);
            resolve();
          }, delay);
        });
      };
  
      // Affiche les messages s√©quentiellement
      for (let i = 0; i < loadingMessages.length; i++) {
        await showMessage(loadingMessages[i], 1500);
      }
  
      // R√©cup√®re la vraie description ensuite
      try {
        const res = await fetch(`/description/${toi}`);
        const data = await res.json();
  
        // Transition douce vers la description finale
        descDiv.style.opacity = "0";
        setTimeout(() => {
          descDiv.textContent = data.description;
          descDiv.style.transition = "opacity 1s ease";
          descDiv.style.opacity = "1";
        }, 500);
  
      } catch (e) {
        descDiv.textContent = "‚ö†Ô∏è Erreur lors de la g√©n√©ration de la description.";
        console.error(e);
      }
    });
  });